#+TITLE: Emacs Config
#+PROPERTY: header-args :tangle config.el
* Table of Contents :toc:
- [[#introduction][Introduction]]
- [[#dired-configuration][Dired Configuration]]
- [[#dashboard][Dashboard]]
- [[#emms][EMMS]]
- [[#identity][Identity]]
- [[#theme][Theme]]
- [[#org-mode][Org Mode]]
- [[#org-publishing][Org Publishing]]
- [[#transparency][Transparency]]
- [[#exwm][EXWM]]
- [[#mu4e][mu4e]]
- [[#elfeed][elfeed]]

* Introduction
This begins our Emacs configuration by setting font sizes! Use `org-babel-tangle` (C-c C-v t) whenever this is modified to save changes to the configuration then run 'doom sync' in a terminal and/or 'doom/refresh' in Emacs to reload the configuration.

#+begin_src elisp
(setq doom-font (font-spec :family "mononoki Nerd Font Mono" :size 12)
      doom-variable-pitch-font (font-spec :family "mononoki Nerd Font" :size 12))
(minimap-mode 1)
#+end_src

* Dired Configuration
Some quality of life improvements for dired. Mostly just sorting things nicer at the moment.

#+begin_src elisp
;;Dired config!
(defun mydired-sort ()
  "Sort dired listings with directories first."
  (save-excursion
    (let (buffer-read-only)
      (forward-line 2) ;; beyond dir. header
      (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
    (set-buffer-modified-p nil)))

(defadvice dired-readin
  (after dired-after-updating-hook first () activate)
  "Sort dired listings with directories first before adding marks."
  (mydired-sort))

(setq-default dired-listing-switches "-alh")
#+end_src

Added some keybindings for dired to make it easier to use it as a file manager

| Command                | Action                                        | Keybinding |
|------------------------+-----------------------------------------------+------------|
| dired-view-file        | View file in dired                            | SPC d v    |
| dired-up-directory     | Go up in directory tree                       | h          |
| dired-find-file        | Go down in directory tree (or open if file)   | l          |
| dired-next-line        | Move down to next line                        | j          |
| dired-previous-line    | Move up to previous line                      | k          |
| dired-mark             | Mark file at point                            | m          |
| dired-unmark           | Unmark file at point                          | u          |
| dired-do-copy          | Copy current file or marked files             | C          |
| dired-do-rename        | Rename current file or marked files           | R          |
| dired-create-driectory | Create new empty directory                    | +          |
| dired-subtree-toggle   | Toggle viewing subtree at point               | TAB        |
| dired-do-chgrp         | Change the group of marked files              | g G        |
| dired-do-chmod         | Change the mode (permissions) of marked files | M          |
| dired-do-chown         | Change the owner of marked files              | O          |

#+begin_src elisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired images previews" "d p" #'peep-dired
        :desc "Cue file to emms playlist" "d c" #'emms-add-dired
        :desc "Dired view file" "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-up-directory
  (kbd "% l") 'dired-downcase
  (kbd "% u") 'dired-upcase
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
#+end_src

Also adding a few keybindings for when peep-dired-mode is enabled
| Command              | Action                                   | Keybinding |
|----------------------+------------------------------------------+------------|
| peep-dired           | Toggle previews within dired             | SPC d p    |
| peep-dired-next-file | Move to next file in peep-dired-mode     | j          |
| peep-dired-prev-file | Move to previous file in peep-dired-mode | k          |

#+begin_src elisp
(evil-define-key 'normal peep-dired-mode-map
  (kbd "j") 'peep-dired-next-file
  (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src

We also get some file icons set up in dired
#+begin_src elisp
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+end_src

Let's direct dired-open to some more sensible apps for some files.
#+begin_src elisp
(setq dired-open-extensions '(("gif" . "feh")
                             ("jpg" . "feh")
                             ("png" . "feh")
                             ("mkv" . "mpv")
                             ("mp3" . "mpv")
                             ("mp4" . "mpv")
                             ("zip" . "file-roller")
                             ("rar" . "file-roller")
                             ("7z" . "file-roller")
                             ("tar" . "file-roller")
                             ("xz" . "file-roller")))
#+end_src

* Dashboard
Add an extensible start up screen showing recent files, bookmarks, agenda items, and more rather than simple help links.
#+begin_src elisp
(use-package dashboard
  :init
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "\nKEYBINDINGS:\nFind file (SPC .)\nFind recent file (SPC f r)\nOpen dired file manager (SPC d d)\nList keybindings (SPC h b b)")
  (setq dashboard-startup-banner "~/.doom.d/doom-emacs-dash.png")
  (setq dashboard-items `((recents . 5)
        (agenda . 5)
        (bookmarks . 5)))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons `((recents . "file-text")
                                    (bookmarks . "book"))))
#+end_src

An extra line is needed to ensure that the emacsclient always opens on *dashboard* rather than *scratch*
#+begin_src elisp
(setq doom-fallback-buffer-name "*dashboard*")
#+end_src

* EMMS
Sets up the Emacs Multimedia System for playing audio, hopefully
#+begin_src elisp
(emms-all)
(emms-default-players)
(emms-mode-line 1)
(emms-playing-time 1)
(setq emms-source-file-default-directory "/mnt/plex/Music/"
      emms-playlist-buffer-name "*Music*"
      emms-info-asynchronously t
      emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
#+end_src

Adds some helpful keybindings for EMMS
| Command               | Action                          | Keybinding |
|-----------------------+---------------------------------+------------|
| emms-playlist-mode-go | Switch to the playlist buffer   | SPC e a    |
| emms-pause            | Pause the current track         | SPC e x    |
| emms-stop             | Stop playback                   | SPC e s    |
| emms-previous         | Play previous track in playlist | SPC e p    |
| emms-next             | Play next track in playlist     | SPC e n    |
#+begin_src elisp
(map! :leader
      (:prefix ("e" . "EMMS audio player")
       :desc "Go to emms playlist" "a" #'emms-playlist-mode-go
       :desc "Emms browser" "b" #'emms-browser
       :desc "Emms pause track" "x" #'emms-pause
       :desc "Emms stop track" "s" #'emms-stop
       :desc "Emms play previous track" "p" #'emms-previous
       :desc "Emms play next track" "n" #'emms-next))
#+end_src

* Identity
Sets my identity for some functions.
#+begin_src elisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Jon Saxton"
      user-mail-address "kawaii_kisachan@live.com")
#+end_src
* Theme
Sets the doom emacs theme!
#+begin_src elisp

(setq doom-theme 'doom-dracula)

#+end_src

* Org Mode
Provides some helpful settings for org mode including agenda and journaling. The `org-todo-keywords` are set for my school-based todo list and may change in the future. If you use `org` mode its a good idea to change the `org-directory`!
#+begin_src elisp
(after! org
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (require 'org-journal)
  (setq org-directory "~/Documents/Org/"
        org-journal-dir "~/Documents/Org/Journal/"
        org-journal-date-format "%d-%b-%Y (%a)"
        org-journal-file-format "%d-%m-%Y.org"
        org-agenda-files '("~/Documents/Org/agenda.org")
        org-log-done 'time
        ;; org-log done 'note
        org-todo-keywords '((sequence "TODO(t)" "PROJ(p)" "STUDY(s)" "ASSIGNMENT(a)" "|" "DONE(d)" "CANCELLED(c)")))
)

#+end_src

* Org Publishing
 #+begin_src elisp
(require 'ox-publish)
(setq org-html-validation-link nil
      org-html-head-include-scripts nil
      org-html-head-include-default-style nil
      org-html-extension "htm" )

(setq org-publish-project-alist
      '(
        ("jon1996"
         :base-directory "/srv/http1996/org/"
         :base-extension "org"
         :publishing-directory "/srv/http1996/pages/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :auto-preamble t
         :with-author nil
         :with-creator t
         :with-toc nil
         :section-numbers nil)
      ("org-static"
       :base-directory "~/Documents/Org/"
       :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
       :publishing-directory "~/public_html"
       :recrusive t
       :publishing-function org-publish-attachment)
))
 #+end_src

* Transparency
With Emacs version 29, true transparency has been added, I am not sure this line will do anything yet, but may let a background through after one is selected and after Emacs is updated to version 29

#+begin_src elisp
;; (add-to-list 'default-frame-alist '(alpha-background . 80)) commented out until Manjaro has Emacs 29, maybe causing long load times!

#+end_src
* EXWM
#+begin_src elisp
(require 'exwm)
(require 'exwm-config)
(exwm-config-default)

(require 'exwm-systemtray)
(exwm-systemtray-enable)

(add-hook 'exwm-update-class-hook
          (lambda ()
                 (exwm-workspace-rename-buffer exwm-class-name)))

(defun exwm-logout ()
  (interactive)
  (recentf-save-list)
  (save-some-buffers)
  (start-process-shell-command "logout" nil "lxsession-logout"))
(defun exwm-lock ()
  (interactive)
  (start-process-shell-command "slock" nil "slock"))

(exwm-input-set-key (kbd "s-Q") 'exwm-logout)
(exwm-input-set-key (kbd "C-s-q") 'exwm-lock)
(exwm-input-set-key (kbd "s-w") '+workspace/close-window-or-workspace)
(exwm-input-set-key (kbd "s-q") 'kill-this-buffer)
(exwm-input-set-key (kbd "s-/") 'dmenu)
(exwm-input-set-key (kbd "s-<tab>") 'exwm-workspace-switch-to-buffer)
(exwm-input-set-key (kbd "M-<tab>") 'exwm-workspace-switch)
(exwm-input-set-key (kbd "s-l") 'evil-window-right)
(exwm-input-set-key (kbd "s-h") 'evil-window-left)
(exwm-input-set-key (kbd "s-j") 'evil-window-down)
(exwm-input-set-key (kbd "s-k") 'evil-window-up)
(exwm-input-set-key (kbd "s-s") 'evil-window-split)
(exwm-input-set-key (kbd "s-v") 'evil-window-vsplit)
(exwm-input-set-key (kbd "s-t") '+vterm/toggle)
(exwm-input-set-key (kbd "s-<return>") 'execute-extended-command)
(exwm-input-set-key (kbd "s-m") 'exwm-layout-toggle-fullscreen)
(exwm-input-set-key (kbd "s-c") 'exwm-input-toggle-keyboard)
(exwm-input-set-key (kbd "s-d") 'dired)

(display-time)
#+end_src

* mu4e
Configures mu4e as a mail client using offlineimap as the backend. Also put the display line number setting here for some reason. Should probably move that
#+begin_src  elisp
(setq display-line-numbers-type t)

(require `mu4e)

(setq mu4e-headers-skip-duplicates t)

(setq mu4e-get-mail-command "offlineimap")

(setq mu4e-contexts
      `(, (make-mu4e-context
           :name "Primary"
           :match-func (lambda(msg) (when msg
                                      (string-prefix-p "/Primary" (mu4e-message-field msg :maildir))))
           :vars `(
                   (mu4e-trash-folder . "/Primary/Deleted Messages")
                   (mu4e-refile-folder . "/Primary/Archive")
                   ))
          , (make-mu4e-context
             :name "Live"
             :match-func (lambda (msg) (when msg
                                         (string-prefix-p "/Live" (mu4e-message-field msg :maildir))))
             :vars '(
                     (mu4e-trash-folder . "/Live/Deleted")
                     (mu4e-refile-folder . "/Live/Archive")
                     ))
            ))

(setq mu4e-sent-folder "/sent"
      mu4e-drafts-folder "/drafts"
      user-mail-address "kawaii_kisachan@live.com"
      smtpmail-smtp-user "kawaii_kisachan@live.com"
      smtpmail-default-smtp-server "smtp.office365.com"
      smtpmail-smtp-server "smtp.office365.com"
      smtpmail-smtp-service 587)

(global-set-key  (kbd "M-m") 'mu4e)
#+end_src
* elfeed
Some configurations for elfeed, mostly just auto-fetching and a global keybinding
#+begin_src elsip
(global-set-key (kbd "M-r") 'elfeed)

(add-hook! 'elfeed-search-mode-hook #'elfeed-update)
#+end_src
