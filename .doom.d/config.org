#+TITLE: Emacs Config
#+PROPERTY: header-args :tangle config.el
* Table of Contents :toc:
- [[#introduction][Introduction]]
- [[#dired-configuration][Dired Configuration]]
- [[#emms][EMMS]]
- [[#identity][Identity]]
- [[#theme][Theme]]
- [[#org-mode][Org Mode]]
- [[#org-publishing][Org Publishing]]
- [[#transparency][Transparency]]
- [[#mu4e][mu4e]]
- [[#elfeed][elfeed]]
- [[#eww][eww]]

* Introduction
This begins our Emacs configuration by setting font sizes! Use `org-babel-tangle` (C-c C-v t) whenever this is modified to save changes to the configuration then run 'doom sync' in a terminal and/or 'doom/refresh' in Emacs to reload the configuration.

#+begin_src elisp
(setq doom-font (font-spec :family "mononoki Nerd Font Mono" :size 12)
      doom-variable-pitch-font (font-spec :family "mononoki Nerd Font" :size 12)
      display-time-24hr-format 1)
(minimap-mode 1)
(display-time-mode 1)
#+end_src

* Dired Configuration
Some quality of life improvements for dired. Mostly just sorting things nicer at the moment.

#+begin_src elisp
;;Dired config!
(defun mydired-sort ()
  "Sort dired listings with directories first."
  (save-excursion
    (let (buffer-read-only)
      (forward-line 2) ;; beyond dir. header
      (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max)))
    (set-buffer-modified-p nil)))

(defadvice dired-readin
  (after dired-after-updating-hook first () activate)
  "Sort dired listings with directories first before adding marks."
  (mydired-sort))

(setq-default dired-listing-switches "-alh")
(setq delete-by-moving-to-trash t)
#+end_src

Added some keybindings for dired to make it easier to use it as a file manager

| Command                | Action                                        | Keybinding |
|------------------------+-----------------------------------------------+------------|
| dired-view-file        | View file in dired                            | SPC d v    |
| dired-up-directory     | Go up in directory tree                       | h          |
| dired-find-file        | Go down in directory tree (or open if file)   | l          |
| dired-next-line        | Move down to next line                        | j          |
| dired-previous-line    | Move up to previous line                      | k          |
| dired-mark             | Mark file at point                            | m          |
| dired-unmark           | Unmark file at point                          | u          |
| dired-do-copy          | Copy current file or marked files             | C          |
| dired-do-rename        | Rename current file or marked files           | R          |
| dired-create-driectory | Create new empty directory                    | +          |
| dired-subtree-toggle   | Toggle viewing subtree at point               | TAB        |
| dired-do-chgrp         | Change the group of marked files              | g G        |
| dired-do-chmod         | Change the mode (permissions) of marked files | M          |
| dired-do-chown         | Change the owner of marked files              | O          |

#+begin_src elisp
(map! :leader
      (:prefix ("d" . "dired")
       :desc "Open dired" "d" #'dired
       :desc "Dired jump to current" "j" #'dired-jump)
      (:after dired
       (:map dired-mode-map
        :desc "Peep-dired images previews" "d p" #'peep-dired
        :desc "Cue file to emms playlist" "d c" #'emms-add-dired
        :desc "Dired open file width xdg-open" "d x" #'dired-open-xdg
        :desc "Dired view file" "d v" #'dired-view-file)))

(evil-define-key 'normal dired-mode-map
  (kbd "M-RET") 'dired-display-file
  (kbd "h") 'dired-up-directory
  (kbd "l") 'dired-open-file ; use dired-find-file instead of dired-open.
  (kbd "m") 'dired-mark
  (kbd "t") 'dired-toggle-marks
  (kbd "u") 'dired-unmark
  (kbd "C") 'dired-do-copy
  (kbd "D") 'dired-do-delete
  (kbd "J") 'dired-goto-file
  (kbd "M") 'dired-do-chmod
  (kbd "O") 'dired-do-chown
  (kbd "P") 'dired-do-print
  (kbd "R") 'dired-do-rename
  (kbd "T") 'dired-do-touch
  (kbd "Y") 'dired-copy-filenamecopy-filename-as-kill ; copies filename to kill ring.
  (kbd "+") 'dired-create-directory
  (kbd "-") 'dired-up-directory
  (kbd "% l") 'dired-downcase
  (kbd "% u") 'dired-upcase
  (kbd "; d") 'epa-dired-do-decrypt
  (kbd "; e") 'epa-dired-do-encrypt)
#+end_src

Also adding a few keybindings for when peep-dired-mode is enabled
| Command              | Action                                   | Keybinding |
|----------------------+------------------------------------------+------------|
| peep-dired           | Toggle previews within dired             | SPC d p    |
| peep-dired-next-file | Move to next file in peep-dired-mode     | j          |
| peep-dired-prev-file | Move to previous file in peep-dired-mode | k          |

#+begin_src elisp
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src

Dired icons were broken, and I removed them mostly because I interact more with emacs/dired in a tty where they didn't work anyway. /Might/ investigate adding back if I end up using Wayland more

Let's direct dired-open to some more sensible apps for some files.
#+begin_src elisp
(setq dired-open-extensions '(("gif" . "feh")
                             ("jpg" . "feh")
                             ("png" . "feh")
                             ("mkv" . "mpv")
                             ("mp3" . "mpv")
                             ("mp4" . "mpv")))
#+end_src

* EMMS
Sets up the Emacs Multimedia System for playing audio, hopefully
#+begin_src elisp
(require 'emms-setup)
(require 'emms-player-mpd)
(emms-all)
;(emms-default-players)
(setq emms-player-list '(emms-player-mpd))
(add-to-list 'emms-info-functions 'emms-info-mpd)
(add-to-list 'emms-player-list 'emms-player-mpd)
(emms-mode-line-mode 1)
(emms-playing-time-mode 1)
(setq emms-source-file-default-directory "~/Music/"
      emms-playlist-buffer-name "*Music*"
      emms-player-mpd-server-name "localhost"
      emms-player-mpd-server-port "6600"
      emms-player-mpd-music-directory "/srv/plex/Music/"
      emms-info-asynchronously t
      emms-source-file-directory-tree-function 'emms-source-file-directory-tree-find)
(emms-player-mpd-connect)
#+end_src

Adds some helpful keybindings for EMMS
| Command               | Action                          | Keybinding |
|-----------------------+---------------------------------+------------|
| emms-playlist-mode-go | Switch to the playlist buffer   | SPC e a    |
| emms-pause            | Pause the current track         | SPC e x    |
| emms-stop             | Stop playback                   | SPC e s    |
| emms-previous         | Play previous track in playlist | SPC e p    |
| emms-next             | Play next track in playlist     | SPC e n    |
#+begin_src elisp
(map! :leader
      (:prefix ("e" . "EMMS audio player")
       :desc "Go to emms playlist" "a" #'emms-playlist-mode-go
       :desc "Emms browser" "b" #'emms-browser
       :desc "Emms pause track" "x" #'emms-pause
       :desc "Emms stop track" "s" #'emms-stop
       :desc "Emms play previous track" "p" #'emms-previous
       :desc "Emms play next track" "n" #'emms-next))
#+end_src

* Identity
Sets my identity for some functions.
#+begin_src elisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Yayoi Shizumi"
      user-mail-address "yayoi_chi@icloud.com")
#+end_src
* Theme
Sets the doom emacs theme!
#+begin_src elisp

(setq doom-theme 'doom-moonlight)

#+end_src

* Org Mode
Provides some helpful settings for org mode including agenda and journaling. The `org-todo-keywords` are set for my school-based todo list and may change in the future. If you use `org` mode its a good idea to change the `org-directory`!
#+begin_src elisp
(after! org
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (require 'org-journal)
  (setq org-directory "~/Documents/Org/"
        org-journal-dir "~/Documents/Org/Journal/"
        org-journal-date-format "%d-%b-%Y (%a)"
        org-journal-file-format "%d-%m-%Y.org"
        org-agenda-files '("~/Documents/Org/agenda.org")
        org-log-done 'time
        ;; org-log done 'note
        org-todo-keywords '((sequence "TODO(t)" "PROJ(p)" "STUDY(s)" "ASSIGNMENT(a)" "|" "DONE(d)" "CANCELLED(c)")))
)

#+end_src

* Org Publishing
 #+begin_src elisp
(require 'ox-publish)
(setq org-html-validation-link nil
      org-html-head-include-scripts nil
      org-html-head-include-default-style nil
      org-html-extension "htm" )

(setq org-publish-project-alist
      '(
        ("jon1996"
         :base-directory "~/Sites/jon1996/org/"
         :base-extension "org"
         :publishing-directory "/srv/http1996/pages/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :auto-preamble t
         :with-author nil
         :with-creator t
         :with-toc nil
         :section-numbers nil)
      ("org-static"
       :base-directory "~/Documents/Org/"
       :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
       :publishing-directory "~/public_html"
       :recrusive t
       :publishing-function org-publish-attachment)
))
 #+end_src

* Transparency
With Emacs version 29, true transparency has been added, I am not sure this line will do anything yet, but may let a background through after one is selected and after Emacs is updated to version 29

#+begin_src elisp
(set-frame-parameter nil 'alpha-background 80)

(add-to-list 'default-frame-alist '(alpha-background . 80))

(setq display-line-numbers-type t)

#+end_src
* mu4e
Configures mu4e as a mail client using offlineimap as the backend. Also put the display line number setting here for some reason. Should probably move that
#+begin_src  elisp
(setq +mu4e-backend 'offlineimap)

(set-email-account! "Primary"
                    '((mu4e-trash-folder . "/Primary/Deleted Messages")
                      (mu4e-refile-folder . "/Primary/Archive"))
                    t)

(after! mu4e
  (setq sendmail-program "/usr/bin/msmtp"
      send-mail-function 'smtpmail-send-it
      message-sendmail-f-is-evil t
      message-sendmail-extra-arguments '("--read-envelope-from")
      message-send-mail-function 'message-send-mail-with-sendmail)
)

#+end_src
* elfeed
Some configurations for elfeed, mostly just auto-fetching and a global keybinding
#+begin_src elisp
(map! :leader
      (:prefix ("o" . "open")
       :desc "elfeed RSS Reader" "*" #'elfeed))

(add-hook! 'elfeed-search-mode-hook #'elfeed-update)
#+end_src

* eww
At this moment, all this is doing is ensuring that emacs starts by opening urls in eww. This is mostly done for times I am running emacs outside of a Wayland/X11 session (tty). To open a url from eww in an external browser, because eww is very limited compared to graphical browsers, just hit the ampersand sign (&).
#+begin_src elisp
(setq browse-url-browser-function 'eww-browse-url)
#+end_src

Adds some helpful keybindings for eww
| Command    | Action                             | Keybinding |
|------------+------------------------------------+------------|
| browse-web | Fetch the URL and renders the page | SPC o w    |
#+begin_src elisp
(map! :leader
      (:prefix ("o" . "open")
       :desc "Browse the Web" "w" #'browse-web))
#+end_src
